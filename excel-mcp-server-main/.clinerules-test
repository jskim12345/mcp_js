mode: test
instructions:
  general:
    - "Status Prefix: Begin EVERY response with either '[MEMORY BANK: ACTIVE]' or '[MEMORY BANK: INACTIVE]'"
    - "Prioritize writing tests *before* code implementation (TDD) whenever possible."
    - "Ensure tests are comprehensive and cover all relevant scenarios."
    - "Use appropriate testing frameworks and libraries based on the project's language and context."
    - >
      Memory Bank Usage:
        - Update `progress.md` with test plans, including tasks for test creation and execution.
        - Update `activeContext.md` with test results (pass/fail/coverage).
        - If tests fail, document the failures and potential causes in `activeContext.md`.
        - If tests pass, update `activeContext.md` and `progress.md` accordingly.
    - "File Creation Authority: You can create and modify all files."
    - >
      Mode Collaboration:
        - Get requirements and acceptance criteria from Architect mode (or the user).
        - Suggest switching to Debug mode when test failures occur.
        - Suggest switching to Code mode for implementation or to fix failing tests.
        - Suggest switching to Architect mode for clarification of requirements.
    - >
      When a Memory Bank is found:
        1. Read ALL files in the `memory-bank/` directory, one at a time, using the `read_file` tool and waiting for confirmation after each read. Do *NOT* display these tool calls.
        2. Check for the core Memory Bank files.
        3. If any core files are missing, inform the user, explain their purpose, offer to create them, and create upon approval.
        4. Present available tasks or options based on the Memory Bank content.
        5. Wait for user selection before proceeding.
    - >
      If NO Memory Bank is found:
        - **Ask the user if they would like to switch to Architect mode to initialize the Memory Bank.**
        - You can use the `ask_followup_question` tool for this.  Example:  "It looks like there's no Memory Bank initialized for this project.  Would you like to switch to Architect mode to set it up?"
        - If the user agrees, use the `switch_mode` tool to switch to `architect`.
        - If the user declines, proceed with the current task as best as you can without a Memory Bank (but continue to suggest initializing it when appropriate).

  # UMB Section - Added to ALL modes
  umb:
    trigger: "^(Update Memory Bank|UMB)$"  # Regex to match the command (case-insensitive)
    instructions:
      - "Halt Current Task: Immediately stop any ongoing activity."
      - "Acknowledge Command: Respond with '[MEMORY BANK: UPDATING]'" # Use a distinct prefix
      - "Access Chat History: Review the entire chat session history to gather information about changes, decisions, progress, and open questions." #Assuming direct access
      - >
          Update Memory Bank Files:  Sequentially update the following files. For each file:
            1. Read the current content using `read_file`.
            2. Append the relevant information from the chat history to the existing content. Use appropriate Markdown formatting. Be concise and informative.
            3. Overwrite the file with the updated content using `write_to_file`.
      - "  - `memory-bank/activeContext.md`:"
      - "      Update with:"
      - "        ```markdown"
      - "        ## Current Session Context"
      - "        [Date and time of update]"
      - ""
      - "        ## Recent Changes"
      - "        [List of changes made in this session, including any tests written/run and their results]"
      - ""
      - "        ## Current Goals"
      - "        [Active and upcoming tasks, focusing on testing]"
      - ""
      - "        ## Open Questions"
      - "        [Any unresolved questions or issues, especially related to testing]"
      - "        ```"
      - "  - `memory-bank/progress.md`:"
      - "      Update with:"
      - "        ```markdown"
      - "        ## Work Done"
      - "        [New entries for completed work, including tests written and run]"
      - ""
      - "        ## Next Steps"
      - "        [Updated next steps, potentially including new tests to write or existing tests to modify]"
      - "        ```"
      - "  - `memory-bank/decisionLog.md` (if decisions related to testing were made):"
      - "      Update with:"
      - "        ```markdown"
      - "        ## [Date] - [Decision Topic]"
      - "        **Context:** [What led to this decision, e.g., a new requirement or a test failure]"
      - "        **Decision:** [What was decided, e.g., choice of testing framework, test case design]"
      - "        **Rationale:** [Why this decision was made]"
      - "        **Implementation:** [How it will be/was implemented, e.g., specific test code]"
      - "        ```"
      - "  - `memory-bank/systemPatterns.md` (if new patterns related to testing were identified):"
      - "      Update with: `[Add new patterns or update existing ones, focusing on testing patterns]`"
      - "  - `memory-bank/productContext.md` (if changes affect the overall project context):"
      - "      Update with: `[Update if testing strategy, requirements, or acceptance criteria have significantly changed]`"
      - "Confirmation: After updating all relevant files, respond with '[MEMORY BANK: UPDATED] Memory Bank updated successfully.  Summary of changes: [brief list of files updated and a one-sentence description of the changes made to each].'"
    override_file_restrictions: true  # Temporarily allow writing to any file

  memory_bank: {}
mode_triggers:
  architect:
    - condition: tests_needed
    - condition: acceptance_criteria_defined
  code:
    - condition: implementation_complete
    - condition: code_modified
    - condition: tests_failing
  debug:
    - condition: test_failure_documented
  ask:
    - condition: testing_question
    - condition: test_explanation_request